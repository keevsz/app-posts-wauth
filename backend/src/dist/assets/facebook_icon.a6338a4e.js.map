{"version":3,"file":"facebook_icon.a6338a4e.js","sources":["../../node_modules/react-hook-form/dist/index.esm.mjs","../../src/hooks/useFetchAndLoad.ts","../../src/assets/google_icon.png","../../src/assets/facebook_icon.png"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\r\n    if (!path || !isObject(obj)) {\r\n        return defaultValue;\r\n    }\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nconst HookFormContext = React.createContext(null);\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useFrom methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\r\n    ? name === signalName\r\n    : !name ||\r\n        !signalName ||\r\n        name === signalName ||\r\n        convertToArrayPayload(name).some((currentName) => currentName &&\r\n            (currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\r\n    const _props = React.useRef(props);\r\n    _props.current = props;\r\n    React.useEffect(() => {\r\n        const subscription = !props.disabled &&\r\n            _props.current.subject.subscribe({\r\n                next: _props.current.callback,\r\n            });\r\n        return () => {\r\n            subscription && subscription.unsubscribe();\r\n        };\r\n    }, [props.disabled]);\r\n}\n\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _mounted = React.useRef(true);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        callback: React.useCallback((value) => _mounted.current &&\r\n            shouldSubscribeByName(_name.current, value.name, exact) &&\r\n            shouldRenderFormState(value, _localProxyFormState.current) &&\r\n            updateFormState({\r\n                ...control._formState,\r\n                ...value,\r\n            }), [control, exact]),\r\n        subject: control._subjects.state,\r\n    });\r\n    React.useEffect(() => {\r\n        _mounted.current = true;\r\n        const isDirty = control._proxyFormState.isDirty && control._getDirty();\r\n        if (isDirty !== control._formState.isDirty) {\r\n            control._subjects.state.next({\r\n                isDirty,\r\n            });\r\n        }\r\n        control._updateValid();\r\n        return () => {\r\n            _mounted.current = false;\r\n        };\r\n    }, [control]);\r\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names);\r\n    }\r\n    if (Array.isArray(names)) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\n\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\n\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (data instanceof Set) {\r\n        copy = new Set(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : {};\r\n        if (!Array.isArray(data) && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                copy[key] = cloneObject(data[key]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\n\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/api/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { watch } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\r\n    const _name = React.useRef(name);\r\n    _name.current = name;\r\n    useSubscribe({\r\n        disabled,\r\n        subject: control._subjects.watch,\r\n        callback: (formState) => {\r\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\r\n                const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\r\n                updateValue(isUndefined(fieldValues) ? defaultValue : cloneObject(fieldValues));\r\n            }\r\n        },\r\n    });\r\n    const [value, updateValue] = React.useState(isUndefined(defaultValue)\r\n        ? control._getWatch(name)\r\n        : defaultValue);\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\n\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, control = methods.control, shouldUnregister } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n    });\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n    }));\r\n    React.useEffect(() => {\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        return () => {\r\n            const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._stateFlags.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    return {\r\n        field: {\r\n            name,\r\n            value,\r\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\r\n                target: {\r\n                    value: getEventValue(event),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.CHANGE,\r\n            }), [name]),\r\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\r\n                target: {\r\n                    value: get(control._formValues, name),\r\n                    name: name,\r\n                },\r\n                type: EVENTS.BLUR,\r\n            }), [name, control]),\r\n            ref: (elm) => {\r\n                const field = get(control._fields, name);\r\n                if (field && elm) {\r\n                    field._f.ref = {\r\n                        focus: () => elm.focus(),\r\n                        select: () => elm.select(),\r\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                        reportValidity: () => elm.reportValidity(),\r\n                    };\r\n                }\r\n            },\r\n        },\r\n        formState,\r\n        fieldState: Object.defineProperties({}, {\r\n            invalid: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.errors, name),\r\n            },\r\n            isDirty: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.dirtyFields, name),\r\n            },\r\n            isTouched: {\r\n                enumerable: true,\r\n                get: () => !!get(formState.touchedFields, name),\r\n            },\r\n            error: {\r\n                enumerable: true,\r\n                get: () => get(formState.errors, name),\r\n            },\r\n        }),\r\n    };\r\n}\n\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f && callback(_f.name)) {\r\n                if (_f.ref.focus) {\r\n                    _f.ref.focus();\r\n                    break;\r\n                }\r\n                else if (_f.refs && _f.refs[0].focus) {\r\n                    _f.refs[0].focus();\r\n                    break;\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                focusFieldBy(currentField, callback);\r\n            }\r\n        }\r\n    }\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = compact(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || React.isValidElement(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) ||\r\n        (Array.isArray(result) && result.every(isMessage)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\r\n    if (!mount || disabled) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\r\n            const isTime = ref.type == 'time';\r\n            const isWeek = ref.type == 'week';\r\n            if (isString(maxOutput.value) && inputValue) {\r\n                exceedMax = isTime\r\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\r\n                    : isWeek\r\n                        ? inputValue > maxOutput.value\r\n                        : valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value) && inputValue) {\r\n                exceedMin = isTime\r\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\r\n                    : isWeek\r\n                        ? inputValue < minOutput.value\r\n                        : valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\n\nfunction append(data, value) {\r\n    return [...data, ...convertToArrayPayload(value)];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\n\nfunction prepend(data, value) {\r\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\r\n}\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\r\n};\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (!isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) && isEmptyArray(objectRef)))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\n\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _fieldIds = React.useRef(fields);\r\n    const _name = React.useRef(name);\r\n    const _actioned = React.useRef(false);\r\n    _name.current = name;\r\n    _fieldIds.current = fields;\r\n    control._names.array.add(name);\r\n    props.rules &&\r\n        control.register(name, props.rules);\r\n    const callback = React.useCallback(({ values, name: fieldArrayName, }) => {\r\n        if (fieldArrayName === _name.current || !fieldArrayName) {\r\n            const fieldValues = get(values, _name.current);\r\n            if (Array.isArray(fieldValues)) {\r\n                setFields(fieldValues);\r\n                ids.current = fieldValues.map(generateId);\r\n            }\r\n        }\r\n    }, []);\r\n    useSubscribe({\r\n        callback,\r\n        subject: control._subjects.array,\r\n    });\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._updateFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append$1 = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = append(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend$1 = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prepend(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._stateFlags.action = false;\r\n        isWatched(name, control._names) && control._subjects.state.next({});\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted)) {\r\n            if (control._options.resolver) {\r\n                control._executeSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError ? !error && existingError.type : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    validateField(field, get(control._formValues, name), control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.watch.next({\r\n            name,\r\n            values: control._formValues,\r\n        });\r\n        control._names.focus &&\r\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\r\n        control._names.focus = '';\r\n        control._proxyFormState.isValid && control._updateValid();\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._updateFieldArray(name);\r\n        return () => {\r\n            (control._options.shouldUnregister || shouldUnregister) &&\r\n                control.unregister(name);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\r\n        append: React.useCallback(append$1, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\n\nfunction createSubject() {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isHTMLElement = (value) => {\r\n    const owner = value ? value.ownerDocument : 0;\r\n    const ElementClass = owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\r\n    return value instanceof ElementClass;\r\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\n\nfunction markFieldsDirty(data, fields = {}) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                fields[key] = Array.isArray(data[key]) ? [] : {};\r\n                markFieldsDirty(data[key], fields[key]);\r\n            }\r\n            else if (!isNullOrUndefined(data[key])) {\r\n                fields[key] = true;\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\r\n    const isParentNodeArray = Array.isArray(data);\r\n    if (isObject(data) || isParentNodeArray) {\r\n        for (const key in data) {\r\n            if (Array.isArray(data[key]) ||\r\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\r\n                if (isUndefined(formValues) ||\r\n                    isPrimitive(dirtyFieldsFromValues[key])) {\r\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\r\n                        ? markFieldsDirty(data[key], [])\r\n                        : { ...markFieldsDirty(data[key]) };\r\n                }\r\n                else {\r\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n                }\r\n            }\r\n            else {\r\n                deepEqual(data[key], formValues[key])\r\n                    ? delete dirtyFieldsFromValues[key]\r\n                    : (dirtyFieldsFromValues[key] = true);\r\n            }\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\n\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\r\n        return;\r\n    }\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? rule\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        errors: {},\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = cloneObject(_options.defaultValues) || {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _stateFlags = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    let validateFields = {};\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    const _subjects = {\r\n        watch: createSubject(),\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = window.setTimeout(callback, wait);\r\n    };\r\n    const _updateValid = async () => {\r\n        if (_proxyFormState.isValid) {\r\n            const isValid = _options.resolver\r\n                ? isEmptyObject((await _executeSchema()).errors)\r\n                : (await executeBuiltInValidation(_fields, true)).valid;\r\n            if (isValid !== _formState.isValid) {\r\n                _formState.isValid = isValid;\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method) {\r\n            _stateFlags.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if (_proxyFormState.touchedFields &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                name,\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _stateFlags.mount && _updateValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let shouldUpdateField = false;\r\n        let isPreviousDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        if (_proxyFormState.isDirty) {\r\n            isPreviousDirty = _formState.isDirty;\r\n            _formState.isDirty = output.isDirty = _getDirty();\r\n            shouldUpdateField = isPreviousDirty !== output.isDirty;\r\n        }\r\n        if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\r\n            isPreviousDirty = get(_formState.dirtyFields, name);\r\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n            isCurrentFieldPristine\r\n                ? unset(_formState.dirtyFields, name)\r\n                : set(_formState.dirtyFields, name, true);\r\n            output.dirtyFields = _formState.dirtyFields;\r\n            shouldUpdateField =\r\n                shouldUpdateField || isPreviousDirty !== !isCurrentFieldPristine;\r\n        }\r\n        if (isBlurEvent) {\r\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n            if (!isPreviousFieldTouched) {\r\n                set(_formState.touchedFields, name, isBlurEvent);\r\n                output.touchedFields = _formState.touchedFields;\r\n                shouldUpdateField =\r\n                    shouldUpdateField ||\r\n                        (_proxyFormState.touchedFields &&\r\n                            isPreviousFieldTouched !== isBlurEvent);\r\n            }\r\n        }\r\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\r\n        return shouldUpdateField ? output : {};\r\n    };\r\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = _proxyFormState.isValid &&\r\n            isBoolean(isValid) &&\r\n            _formState.isValid !== isValid;\r\n        if (props.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(props.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n        validateFields[name]--;\r\n        if (_proxyFormState.isValidating &&\r\n            !Object.values(validateFields).some((v) => v)) {\r\n            _subjects.state.next({\r\n                isValidating: false,\r\n            });\r\n            validateFields = {};\r\n        }\r\n    };\r\n    const _executeSchema = async (name) => await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _executeSchema();\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const fieldError = await validateField(field, get(_formValues, _f.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation, isFieldArrayRoot);\r\n                    if (fieldError[_f.name]) {\r\n                        if (_f.name === context.name) {\r\n                            context.error = fieldError[context.name];\r\n                        }\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                fieldValue &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\r\n        !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\r\n        ...(_stateFlags.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue),\r\n    }, isGlobal);\r\n    const _getFieldArray = (name) => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.length > 1\r\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\r\n                                (checkboxRef.checked = Array.isArray(fieldValue)\r\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\r\n                                    : fieldValue === checkboxRef.value))\r\n                            : fieldReference.refs[0] &&\r\n                                (fieldReference.refs[0].checked = !!fieldValue);\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.watch.next({\r\n                            name,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = `${name}.${fieldKey}`;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                !isPrimitive(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: _formValues,\r\n            });\r\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: _formState.dirtyFields,\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({});\r\n        _subjects.watch.next({\r\n            name,\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        const target = event.target;\r\n        let name = target.name;\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                field._f.onBlur && field._f.onBlur(event);\r\n                delayErrorCallback && delayErrorCallback(0);\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.watch.next({\r\n                    name,\r\n                    type: event.type,\r\n                });\r\n            if (shouldSkipValidation) {\r\n                _proxyFormState.isValid && _updateValid();\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({});\r\n            validateFields[name] = validateFields[name]\r\n                ? validateFields[name] + 1\r\n                : 1;\r\n            _subjects.state.next({\r\n                isValidating: true,\r\n            });\r\n            if (_options.resolver) {\r\n                const { errors } = await _executeSchema([name]);\r\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                error = errorLookupResult.error;\r\n                name = errorLookupResult.name;\r\n                isValid = isEmptyObject(errors);\r\n            }\r\n            else {\r\n                if (_proxyFormState.isValid) {\r\n                    const buildInValidationResult = await executeBuiltInValidation(_fields, true, {\r\n                        name,\r\n                        valid: true,\r\n                    });\r\n                    error = buildInValidationResult.error || {};\r\n                    isValid = buildInValidationResult.valid;\r\n                }\r\n                if (!error || isEmptyObject(error)) {\r\n                    error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                }\r\n            }\r\n            field._f.deps &&\r\n                trigger(field._f.deps);\r\n            shouldRenderByError(name, isValid, error, fieldState);\r\n        }\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        _subjects.state.next({\r\n            isValidating: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return (await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field)).valid;\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _updateValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = (await executeBuiltInValidation(_fields))\r\n                .valid;\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver || !name ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n            isValidating: false,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames) => {\r\n        const values = {\r\n            ..._defaultValues,\r\n            ...(_stateFlags.mount ? _formValues : {}),\r\n        };\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name\r\n            ? convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName))\r\n            : (_formState.errors = {});\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        set(_formState.errors, name, {\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.watch.subscribe({\r\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (get(_fields, fieldName)) {\r\n                if (!options.keepValue) {\r\n                    unset(_fields, fieldName);\r\n                    unset(_formValues, fieldName);\r\n                }\r\n                !options.keepError && unset(_formState.errors, fieldName);\r\n                !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n                !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n                !_options.shouldUnregister &&\r\n                    !options.keepDefaultValue &&\r\n                    unset(_defaultValues, fieldName);\r\n            }\r\n        }\r\n        _subjects.watch.next({});\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _updateValid();\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        field\r\n            ? disabledIsDefined &&\r\n                set(_formValues, name, options.disabled\r\n                    ? undefined\r\n                    : get(_formValues, name, getFieldValue(field._f)))\r\n            : updateValidAndValue(name, true, options.value);\r\n        return {\r\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\r\n            ...(_options.shouldUseNativeValidation\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const _focusError = () => _options.shouldFocusError &&\r\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist && e.persist();\r\n        }\r\n        let hasNoPromiseError = true;\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        try {\r\n            if (_options.resolver) {\r\n                const { errors, values } = await _executeSchema();\r\n                _formState.errors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                await executeBuiltInValidation(_fields);\r\n            }\r\n            if (isEmptyObject(_formState.errors)) {\r\n                _subjects.state.next({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                if (onInvalid) {\r\n                    await onInvalid({ ..._formState.errors }, e);\r\n                }\r\n                _focusError();\r\n            }\r\n        }\r\n        catch (err) {\r\n            hasNoPromiseError = false;\r\n            throw err;\r\n        }\r\n        finally {\r\n            _formState.isSubmitted = true;\r\n            _subjects.state.next({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\r\n                submitCount: _formState.submitCount + 1,\r\n                errors: _formState.errors,\r\n            });\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, get(_defaultValues, name));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, options.defaultValue);\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, get(_defaultValues, name))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _updateValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues || _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const values = formValues && !isEmptyObject(formValues)\r\n            ? cloneUpdatedValues\r\n            : _defaultValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                for (const fieldName of _names.mount) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            if (isHTMLElement(fieldReference)) {\r\n                                const form = fieldReference.closest('form');\r\n                                if (form) {\r\n                                    form.reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _fields = {};\r\n            }\r\n            _formValues = props.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneUpdatedValues;\r\n            _subjects.array.next({\r\n                values,\r\n            });\r\n            _subjects.watch.next({\r\n                values,\r\n            });\r\n        }\r\n        _names = {\r\n            mount: new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _stateFlags.mount =\r\n            !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\r\n        _stateFlags.watch = !!props.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.isDirty\r\n                : !!(keepStateOptions.keepDefaultValues &&\r\n                    !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\r\n                ? _formState.dirtyFields\r\n                : keepStateOptions.keepDefaultValues && formValues\r\n                    ? getDirtyFields(_defaultValues, formValues)\r\n                    : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect && fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            _executeSchema,\r\n            _focusError,\r\n            _getWatch,\r\n            _getDirty,\r\n            _updateValid,\r\n            _removeUnmounted,\r\n            _updateFieldArray,\r\n            _getFieldArray,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _stateFlags() {\r\n                return _stateFlags;\r\n            },\r\n            set _stateFlags(value) {\r\n                _stateFlags = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            set _formState(value) {\r\n                _formState = value;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n}\n\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef();\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        errors: {},\r\n        defaultValues: props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        _formControl.current = {\r\n            ...createFormControl(props),\r\n            formState,\r\n        };\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useSubscribe({\r\n        subject: control._subjects.state,\r\n        callback: React.useCallback((value) => {\r\n            if (shouldRenderFormState(value, control._proxyFormState, true)) {\r\n                control._formState = {\r\n                    ...control._formState,\r\n                    ...value,\r\n                };\r\n                updateFormState({ ...control._formState });\r\n            }\r\n        }, [control]),\r\n    });\r\n    React.useEffect(() => {\r\n        if (!control._stateFlags.mount) {\r\n            control._proxyFormState.isValid && control._updateValid();\r\n            control._stateFlags.mount = true;\r\n        }\r\n        if (control._stateFlags.watch) {\r\n            control._stateFlags.watch = false;\r\n            control._subjects.state.next({});\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    React.useEffect(() => {\r\n        formState.submitCount && control._focusError();\r\n    }, [control, formState.submitCount]);\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { AxiosCall } from '../models/axios-call.models';\r\nimport { AxiosResponse } from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useFetchAndLoad = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  let controller: AbortController;\r\n\r\n  const callEndpoint = async (axiosCall: AxiosCall<any>) => {\r\n    if (axiosCall.controller) controller = axiosCall.controller;\r\n    setLoading(true);\r\n    let result = {} as AxiosResponse<any>;\r\n    try {\r\n      result = await axiosCall.call;\r\n    } catch (err: any) {\r\n      setLoading(false);\r\n      console.log(err.message)\r\n      throw err;\r\n    }\r\n    setLoading(false);\r\n    return result;\r\n  };\r\n\r\n  const cancelEndpoint = () => {\r\n    setLoading(false);\r\n    controller && controller.abort();\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      cancelEndpoint();\r\n    };\r\n  }, []);\r\n\r\n  return { loading, callEndpoint };\r\n};\r\n\r\nexport default useFetchAndLoad;","export default \"__VITE_ASSET__9ae9f0d1__\"","export default \"__VITE_ASSET__9d92b67f__\""],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","has","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","React","createContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","find","convertToArrayPayload","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","appendErrors","validateAllFieldCriteria","errors","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isWatched","isBlurEvent","some","watchName","startsWith","slice","updateFieldArrayRootError","error","fieldArrayErrors","isBoolean","isFileInput","isFunction","isMessage","isValidElement","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","inputValue","shouldUseNativeValidation","isFieldArray","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","baseGet","updatePath","isEmptyArray","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isHTMLElement","owner","ownerDocument","ElementClass","defaultView","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","_options","_formState","submitCount","isDirty","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","_formValues","shouldUnregister","_stateFlags","action","unMount","array","delayErrorCallback","timer","validateFields","_subjects","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","resolver","_executeSchema","executeBuiltInValidation","valid","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","isFieldArrayRoot","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","buildInValidationResult","fieldNames","Promise","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","payload","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","useForm","_formControl","updateFormState","useState","useCallback","useFetchAndLoad","loading","setLoading","controller","callEndpoint","axiosCall","cancelEndpoint","google_icon","facebook_icon"],"mappings":"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"}